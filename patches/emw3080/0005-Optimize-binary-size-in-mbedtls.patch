From 4c659c0b7f2b3a11cd904e167387f82b7cfdeda2 Mon Sep 17 00:00:00 2001
From: "qin.li" <qin.li@samsung.com>
Date: Tue, 10 Mar 2020 17:46:44 +0800
Subject: [PATCH] Optimize binary size in mbedtls

---
 MiCO/net/mbedtls/library/asn1parse.c        | 15 ++++++++++++++
 MiCO/net/mbedtls/library/bignum.c           | 32 +++++++++++++++++++++++++++++
 MiCO/net/mbedtls/library/ecp.c              |  9 ++++++++
 MiCO/net/mbedtls/library/ecp_curves.c       |  6 ++++++
 MiCO/net/mbedtls/library/oid.c              |  4 ++++
 MiCO/net/mbedtls/library/pk.c               | 19 +++++++++++++++++
 MiCO/net/mbedtls/library/pkparse.c          | 14 +++++++++++++
 MiCO/net/mbedtls/library/ssl_ciphersuites.c |  3 ++-
 MiCO/net/mbedtls/library/ssl_cli.c          | 15 ++++++++++++++
 MiCO/net/mbedtls/library/x509.c             | 15 ++++++++++++++
 MiCO/net/mbedtls/library/x509_crt.c         | 18 +++++++++++++++-
 MiCO/net/mbedtls/mbedtls.mk                 |  2 +-
 12 files changed, 149 insertions(+), 3 deletions(-)

diff --git a/MiCO/net/mbedtls/library/asn1parse.c b/MiCO/net/mbedtls/library/asn1parse.c
index b37523d..de915b0 100644
--- a/MiCO/net/mbedtls/library/asn1parse.c
+++ b/MiCO/net/mbedtls/library/asn1parse.c
@@ -335,6 +335,9 @@ int mbedtls_asn1_get_alg_null( unsigned char **p,
                        const unsigned char *end,
                        mbedtls_asn1_buf *alg )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
     int ret;
     mbedtls_asn1_buf params;
 
@@ -347,10 +350,14 @@ int mbedtls_asn1_get_alg_null( unsigned char **p,
         return( MBEDTLS_ERR_ASN1_INVALID_DATA );
 
     return( 0 );
+#endif
 }
 
 void mbedtls_asn1_free_named_data( mbedtls_asn1_named_data *cur )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+#else
+
     if( cur == NULL )
         return;
 
@@ -358,10 +365,13 @@ void mbedtls_asn1_free_named_data( mbedtls_asn1_named_data *cur )
     mbedtls_free( cur->val.p );
 
     mbedtls_zeroize( cur, sizeof( mbedtls_asn1_named_data ) );
+#endif
 }
 
 void mbedtls_asn1_free_named_data_list( mbedtls_asn1_named_data **head )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+#else
     mbedtls_asn1_named_data *cur;
 
     while( ( cur = *head ) != NULL )
@@ -370,11 +380,15 @@ void mbedtls_asn1_free_named_data_list( mbedtls_asn1_named_data **head )
         mbedtls_asn1_free_named_data( cur );
         mbedtls_free( cur );
     }
+#endif
 }
 
 mbedtls_asn1_named_data *mbedtls_asn1_find_named_data( mbedtls_asn1_named_data *list,
                                        const char *oid, size_t len )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return NULL;
+#else
     while( list != NULL )
     {
         if( list->oid.len == len &&
@@ -387,6 +401,7 @@ mbedtls_asn1_named_data *mbedtls_asn1_find_named_data( mbedtls_asn1_named_data *
     }
 
     return( list );
+#endif
 }
 
 #endif /* MBEDTLS_ASN1_PARSE_C */
diff --git a/MiCO/net/mbedtls/library/bignum.c b/MiCO/net/mbedtls/library/bignum.c
index 3f8615a..5f58d4b 100644
--- a/MiCO/net/mbedtls/library/bignum.c
+++ b/MiCO/net/mbedtls/library/bignum.c
@@ -488,6 +488,7 @@ cleanup:
     return( ret );
 }
 
+#if !defined(MBEDTLS_IOT_CORE_OPTIM)
 /*
  * Helper to write the digits high-order first
  */
@@ -514,6 +515,7 @@ cleanup:
 
     return( ret );
 }
+#endif
 
 /*
  * Export into an ASCII string
@@ -521,6 +523,10 @@ cleanup:
 int mbedtls_mpi_write_string( const mbedtls_mpi *X, int radix,
                               char *buf, size_t buflen, size_t *olen )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     int ret = 0;
     size_t n;
     char *p;
@@ -584,6 +590,7 @@ cleanup:
     mbedtls_mpi_free( &T );
 
     return( ret );
+#endif
 }
 
 #if defined(MBEDTLS_FS_IO)
@@ -1057,6 +1064,10 @@ cleanup:
  */
 int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint b )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     mbedtls_mpi _B;
     mbedtls_mpi_uint p[1];
 
@@ -1066,6 +1077,7 @@ int mbedtls_mpi_add_int( mbedtls_mpi *X, const mbedtls_mpi *A, mbedtls_mpi_sint
     _B.p = p;
 
     return( mbedtls_mpi_add_mpi( X, A, &_B ) );
+#endif
 }
 
 /*
@@ -1378,6 +1390,10 @@ cleanup:
  */
 int mbedtls_mpi_div_int( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, mbedtls_mpi_sint b )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     mbedtls_mpi _B;
     mbedtls_mpi_uint p[1];
 
@@ -1387,6 +1403,7 @@ int mbedtls_mpi_div_int( mbedtls_mpi *Q, mbedtls_mpi *R, const mbedtls_mpi *A, m
     _B.p = p;
 
     return( mbedtls_mpi_div_mpi( Q, R, A, &_B ) );
+#endif
 }
 
 /*
@@ -1417,6 +1434,10 @@ cleanup:
  */
 int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_sint b )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     size_t i;
     mbedtls_mpi_uint x, y, z;
 
@@ -1467,6 +1488,7 @@ int mbedtls_mpi_mod_int( mbedtls_mpi_uint *r, const mbedtls_mpi *A, mbedtls_mpi_
     *r = y;
 
     return( 0 );
+#endif
 }
 
 /*
@@ -2095,6 +2117,10 @@ int mbedtls_mpi_is_prime( const mbedtls_mpi *X,
                   int (*f_rng)(void *, unsigned char *, size_t),
                   void *p_rng )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     int ret;
     mbedtls_mpi XX;
 
@@ -2118,6 +2144,7 @@ int mbedtls_mpi_is_prime( const mbedtls_mpi *X,
     }
 
     return( mpi_miller_rabin( &XX, f_rng, p_rng ) );
+#endif
 }
 
 /*
@@ -2127,6 +2154,10 @@ int mbedtls_mpi_gen_prime( mbedtls_mpi *X, size_t nbits, int dh_flag,
                    int (*f_rng)(void *, unsigned char *, size_t),
                    void *p_rng )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     int ret;
     size_t k, n;
     mbedtls_mpi_uint r;
@@ -2210,6 +2241,7 @@ cleanup:
     mbedtls_mpi_free( &Y );
 
     return( ret );
+#endif
 }
 
 #endif /* MBEDTLS_GENPRIME */
diff --git a/MiCO/net/mbedtls/library/ecp.c b/MiCO/net/mbedtls/library/ecp.c
index 858540b..d24ae07 100644
--- a/MiCO/net/mbedtls/library/ecp.c
+++ b/MiCO/net/mbedtls/library/ecp.c
@@ -79,6 +79,10 @@ static void mbedtls_zeroize( void *v, size_t n ) {
 static unsigned long add_count, dbl_count, mul_count;
 #endif
 
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+#undef MBEDTLS_ECP_DP_SECP256R1_ENABLED
+#endif
+
 #if defined(MBEDTLS_ECP_DP_SECP192R1_ENABLED) ||   \
     defined(MBEDTLS_ECP_DP_SECP224R1_ENABLED) ||   \
     defined(MBEDTLS_ECP_DP_SECP256R1_ENABLED) ||   \
@@ -1673,6 +1677,10 @@ int mbedtls_ecp_muladd( mbedtls_ecp_group *grp, mbedtls_ecp_point *R,
              const mbedtls_mpi *m, const mbedtls_ecp_point *P,
              const mbedtls_mpi *n, const mbedtls_ecp_point *Q )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     int ret;
     mbedtls_ecp_point mP;
 
@@ -1690,6 +1698,7 @@ cleanup:
     mbedtls_ecp_point_free( &mP );
 
     return( ret );
+#endif
 }
 
 
diff --git a/MiCO/net/mbedtls/library/ecp_curves.c b/MiCO/net/mbedtls/library/ecp_curves.c
index 68323c5..1aaf280 100644
--- a/MiCO/net/mbedtls/library/ecp_curves.c
+++ b/MiCO/net/mbedtls/library/ecp_curves.c
@@ -35,6 +35,10 @@
 #define inline __inline
 #endif
 
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+#undef MBEDTLS_ECP_DP_SECP256R1_ENABLED
+#endif
+
 /*
  * Conversion macros for embedded constants:
  * build lists of mbedtls_mpi_uint's from lists of unsigned char's grouped by 8, 4 or 2
@@ -568,6 +572,7 @@ static inline void ecp_mpi_set1( mbedtls_mpi *X )
     X->p = one;
 }
 
+#if !defined(MBEDTLS_IOT_CORE_OPTIM)
 /*
  * Make group available from embedded constants
  */
@@ -596,6 +601,7 @@ static int ecp_group_load( mbedtls_ecp_group *grp,
 
     return( 0 );
 }
+#endif
 
 #if defined(MBEDTLS_ECP_NIST_OPTIM)
 /* Forward declarations */
diff --git a/MiCO/net/mbedtls/library/oid.c b/MiCO/net/mbedtls/library/oid.c
index 1bd47d7..283316b 100644
--- a/MiCO/net/mbedtls/library/oid.c
+++ b/MiCO/net/mbedtls/library/oid.c
@@ -45,6 +45,10 @@
 #include "mbedtls/x509.h"
 #endif
 
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+#undef MBEDTLS_ECP_DP_SECP256K1_ENABLED
+#endif
+
 /*
  * Macro to automatically add the size of #define'd OIDs
  */
diff --git a/MiCO/net/mbedtls/library/pk.c b/MiCO/net/mbedtls/library/pk.c
index 10bd0a5..d9c972e 100644
--- a/MiCO/net/mbedtls/library/pk.c
+++ b/MiCO/net/mbedtls/library/pk.c
@@ -39,6 +39,10 @@
 #include "mbedtls/ecdsa.h"
 #endif
 
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+#undef MBEDTLS_ECP_C
+#endif
+
 /* Implementation that should never be optimized out by the compiler */
 static void mbedtls_zeroize( void *v, size_t n ) {
     volatile unsigned char *p = v; while( n-- ) *p++ = 0;
@@ -250,6 +254,10 @@ int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
              unsigned char *sig, size_t *sig_len,
              int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     if( ctx == NULL || ctx->pk_info == NULL ||
         pk_hashlen_helper( md_alg, &hash_len ) != 0 )
         return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
@@ -259,6 +267,7 @@ int mbedtls_pk_sign( mbedtls_pk_context *ctx, mbedtls_md_type_t md_alg,
 
     return( ctx->pk_info->sign_func( ctx->pk_ctx, md_alg, hash, hash_len,
                                      sig, sig_len, f_rng, p_rng ) );
+#endif
 }
 
 /*
@@ -269,6 +278,10 @@ int mbedtls_pk_decrypt( mbedtls_pk_context *ctx,
                 unsigned char *output, size_t *olen, size_t osize,
                 int (*f_rng)(void *, unsigned char *, size_t), void *p_rng )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     if( ctx == NULL || ctx->pk_info == NULL )
         return( MBEDTLS_ERR_PK_BAD_INPUT_DATA );
 
@@ -277,6 +290,7 @@ int mbedtls_pk_decrypt( mbedtls_pk_context *ctx,
 
     return( ctx->pk_info->decrypt_func( ctx->pk_ctx, input, ilen,
                 output, olen, osize, f_rng, p_rng ) );
+#endif
 }
 
 /*
@@ -302,6 +316,10 @@ int mbedtls_pk_encrypt( mbedtls_pk_context *ctx,
  */
 int mbedtls_pk_check_pair( const mbedtls_pk_context *pub, const mbedtls_pk_context *prv )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     if( pub == NULL || pub->pk_info == NULL ||
         prv == NULL || prv->pk_info == NULL ||
         prv->pk_info->check_pair_func == NULL )
@@ -321,6 +339,7 @@ int mbedtls_pk_check_pair( const mbedtls_pk_context *pub, const mbedtls_pk_conte
     }
 
     return( prv->pk_info->check_pair_func( pub->pk_ctx, prv->pk_ctx ) );
+#endif
 }
 
 /*
diff --git a/MiCO/net/mbedtls/library/pkparse.c b/MiCO/net/mbedtls/library/pkparse.c
index bddcf5d..ad4491c 100644
--- a/MiCO/net/mbedtls/library/pkparse.c
+++ b/MiCO/net/mbedtls/library/pkparse.c
@@ -33,6 +33,10 @@
 
 #include <string.h>
 
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+#undef MBEDTLS_ECP_C
+#endif
+
 #if defined(MBEDTLS_RSA_C)
 #include "mbedtls/rsa.h"
 #endif
@@ -850,6 +854,10 @@ static int pk_parse_key_pkcs8_unencrypted_der(
                                     const unsigned char* key,
                                     size_t keylen )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     int ret, version;
     size_t len;
     mbedtls_asn1_buf params;
@@ -928,6 +936,7 @@ static int pk_parse_key_pkcs8_unencrypted_der(
         return( MBEDTLS_ERR_PK_UNKNOWN_PK_ALG );
 
     return( 0 );
+#endif
 }
 
 /*
@@ -1247,6 +1256,10 @@ int mbedtls_pk_parse_key( mbedtls_pk_context *pk,
 int mbedtls_pk_parse_public_key( mbedtls_pk_context *ctx,
                          const unsigned char *key, size_t keylen )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     int ret;
     unsigned char *p;
 #if defined(MBEDTLS_PEM_PARSE_C)
@@ -1287,6 +1300,7 @@ int mbedtls_pk_parse_public_key( mbedtls_pk_context *ctx,
 #endif
 
     return( ret );
+#endif
 }
 
 #endif /* MBEDTLS_PK_PARSE_C */
diff --git a/MiCO/net/mbedtls/library/ssl_ciphersuites.c b/MiCO/net/mbedtls/library/ssl_ciphersuites.c
index 8bad7ab..6089cc9 100644
--- a/MiCO/net/mbedtls/library/ssl_ciphersuites.c
+++ b/MiCO/net/mbedtls/library/ssl_ciphersuites.c
@@ -673,12 +673,13 @@ static const mbedtls_ssl_ciphersuite_t ciphersuite_definitions[] =
 #endif /* MBEDTLS_GCM_C */
 
 #if defined(MBEDTLS_CIPHER_MODE_CBC)
+#if !defined(MBEDTLS_IOT_CORE_OPTIM)
     { MBEDTLS_TLS_RSA_WITH_AES_128_CBC_SHA256, "TLS-RSA-WITH-AES-128-CBC-SHA256",
       MBEDTLS_CIPHER_AES_128_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
       MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,
       MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,
       0 },
-
+#endif
     { MBEDTLS_TLS_RSA_WITH_AES_256_CBC_SHA256, "TLS-RSA-WITH-AES-256-CBC-SHA256",
       MBEDTLS_CIPHER_AES_256_CBC, MBEDTLS_MD_SHA256, MBEDTLS_KEY_EXCHANGE_RSA,
       MBEDTLS_SSL_MAJOR_VERSION_3, MBEDTLS_SSL_MINOR_VERSION_3,
diff --git a/MiCO/net/mbedtls/library/ssl_cli.c b/MiCO/net/mbedtls/library/ssl_cli.c
index 5a9c432..82d51ca 100644
--- a/MiCO/net/mbedtls/library/ssl_cli.c
+++ b/MiCO/net/mbedtls/library/ssl_cli.c
@@ -991,6 +991,10 @@ static int ssl_parse_supported_point_formats_ext( mbedtls_ssl_context *ssl,
                                                   const unsigned char *buf,
                                                   size_t len )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     size_t list_size;
     const unsigned char *p;
 
@@ -1018,6 +1022,7 @@ static int ssl_parse_supported_point_formats_ext( mbedtls_ssl_context *ssl,
 
     MBEDTLS_SSL_DEBUG_MSG( 1, ( "no point format in common" ) );
     return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_HELLO );
+#endif
 }
 #endif /* MBEDTLS_ECDH_C || MBEDTLS_ECDSA_C */
 
@@ -1075,6 +1080,10 @@ static int ssl_parse_alpn_ext( mbedtls_ssl_context *ssl,
 #if defined(MBEDTLS_SSL_PROTO_DTLS)
 static int ssl_parse_hello_verify_request( mbedtls_ssl_context *ssl )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     const unsigned char *p = ssl->in_msg + mbedtls_ssl_hs_hdr_len( ssl );
     int major_ver, minor_ver;
     unsigned char cookie_len;
@@ -1132,6 +1141,7 @@ static int ssl_parse_hello_verify_request( mbedtls_ssl_context *ssl )
     MBEDTLS_SSL_DEBUG_MSG( 2, ( "<= parse hello verify request" ) );
 
     return( 0 );
+#endif
 }
 #endif /* MBEDTLS_SSL_PROTO_DTLS */
 
@@ -1707,6 +1717,10 @@ static int ssl_parse_server_psk_hint( mbedtls_ssl_context *ssl,
                                       unsigned char **p,
                                       unsigned char *end )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     int ret = MBEDTLS_ERR_SSL_FEATURE_UNAVAILABLE;
     size_t  len;
     ((void) ssl);
@@ -1731,6 +1745,7 @@ static int ssl_parse_server_psk_hint( mbedtls_ssl_context *ssl,
     ret = 0;
 
     return( ret );
+#endif
 }
 #endif /* MBEDTLS_KEY_EXCHANGE__SOME__PSK_ENABLED */
 
diff --git a/MiCO/net/mbedtls/library/x509.c b/MiCO/net/mbedtls/library/x509.c
index bf9d0be..4b6f595 100644
--- a/MiCO/net/mbedtls/library/x509.c
+++ b/MiCO/net/mbedtls/library/x509.c
@@ -667,6 +667,10 @@ int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
  */
 int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     int ret;
     size_t i, n;
     unsigned char c, merge = 0;
@@ -721,6 +725,7 @@ int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
     }
 
     return( (int) ( size - n ) );
+#endif
 }
 
 /*
@@ -729,6 +734,10 @@ int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
  */
 int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     int ret;
     size_t i, n, nr;
     char *p;
@@ -756,6 +765,7 @@ int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *se
     }
 
     return( (int) ( size - n ) );
+#endif
 }
 
 /*
@@ -765,6 +775,10 @@ int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *s
                        mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                        const void *sig_opts )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     int ret;
     char *p = buf;
     size_t n = size;
@@ -801,6 +815,7 @@ int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *s
 #endif /* MBEDTLS_X509_RSASSA_PSS_SUPPORT */
 
     return( (int)( size - n ) );
+#endif
 }
 
 /*
diff --git a/MiCO/net/mbedtls/library/x509_crt.c b/MiCO/net/mbedtls/library/x509_crt.c
index 6477a17..2a9cbc3 100644
--- a/MiCO/net/mbedtls/library/x509_crt.c
+++ b/MiCO/net/mbedtls/library/x509_crt.c
@@ -350,6 +350,10 @@ static int x509_get_ns_cert_type( unsigned char **p,
                                        const unsigned char *end,
                                        unsigned char *ns_cert_type)
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     int ret;
     mbedtls_x509_bitstring bs = { 0, 0, NULL };
 
@@ -363,6 +367,7 @@ static int x509_get_ns_cert_type( unsigned char **p,
     /* Get actual bitstring */
     *ns_cert_type = *bs.p;
     return( 0 );
+#endif
 }
 
 static int x509_get_key_usage( unsigned char **p,
@@ -1202,6 +1207,7 @@ cleanup:
 }
 #endif /* MBEDTLS_FS_IO */
 
+#if !defined(MBEDTLS_IOT_CORE_OPTIM)
 static int x509_info_subject_alt_name( char **buf, size_t *size,
                                        const mbedtls_x509_sequence *subject_alt_name )
 {
@@ -1301,7 +1307,7 @@ static int x509_info_key_usage( char **buf, size_t *size,
 
     return( 0 );
 }
-
+#endif
 static int x509_info_ext_key_usage( char **buf, size_t *size,
                                     const mbedtls_x509_sequence *extended_key_usage )
 {
@@ -1339,6 +1345,10 @@ static int x509_info_ext_key_usage( char **buf, size_t *size,
 int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
                    const mbedtls_x509_crt *crt )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     int ret;
     size_t n;
     char *p;
@@ -1458,6 +1468,7 @@ int mbedtls_x509_crt_info( char *buf, size_t size, const char *prefix,
     MBEDTLS_X509_SAFE_SNPRINTF;
 
     return( (int) ( size - n ) );
+#endif
 }
 
 struct x509_crt_verify_string {
@@ -1492,6 +1503,10 @@ static const struct x509_crt_verify_string x509_crt_verify_strings[] = {
 int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
                           uint32_t flags )
 {
+#if defined(MBEDTLS_IOT_CORE_OPTIM)
+	return -1;
+#else
+
     int ret;
     const struct x509_crt_verify_string *cur;
     char *p = buf;
@@ -1515,6 +1530,7 @@ int mbedtls_x509_crt_verify_info( char *buf, size_t size, const char *prefix,
     }
 
     return( (int) ( size - n ) );
+#endif
 }
 
 #if defined(MBEDTLS_X509_CHECK_KEY_USAGE)
diff --git a/MiCO/net/mbedtls/mbedtls.mk b/MiCO/net/mbedtls/mbedtls.mk
index 0030303..f86e513 100644
--- a/MiCO/net/mbedtls/mbedtls.mk
+++ b/MiCO/net/mbedtls/mbedtls.mk
@@ -40,7 +40,7 @@ GLOBAL_INCLUDES +=  $(IOT_APPS_PATH)/$(PROJECT_TITLE) \
 				   ./include \
 				   ./configs
 
-$(NAME)_CFLAGS = -DSUPPORT_MBEDTLS
+$(NAME)_CFLAGS = -DSUPPORT_MBEDTLS -DMBEDTLS_IOT_CORE_OPTIM
 #
 # Get the list of C files
 #
-- 
2.7.4

