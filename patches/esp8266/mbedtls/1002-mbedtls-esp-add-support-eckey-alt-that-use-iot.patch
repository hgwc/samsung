From 16d4cebe3399e9384ae1b05dce6e4c87f1fb689a Mon Sep 17 00:00:00 2001
From: Sanghee Kim <sh0130.kim@samsung.com>
Date: Fri, 3 Jul 2020 20:10:14 +0900
Subject: [PATCH] mbedtls: esp: add support eckey alt that use iot security

Use iot_security_pk_xxx as eckey alternative functions.

To enable this, need to set following.
- CONFIG_STDK_IOT_CORE_MBEDTLS_USE_ALT

Signed-off-by: Sanghee Kim <sh0130.kim@samsung.com>
---
 include/mbedtls/pk.h          |   3 +
 include/mbedtls/pk_internal.h |   3 +
 library/pk.c                  |   4 +
 library/pk_wrap_alt.c         | 225 ++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 235 insertions(+)
 create mode 100644 library/pk_wrap_alt.c

diff --git a/include/mbedtls/pk.h b/include/mbedtls/pk.h
index 1364275..4ccd18b 100644
--- a/include/mbedtls/pk.h
+++ b/include/mbedtls/pk.h
@@ -83,6 +83,9 @@ typedef enum {
     MBEDTLS_PK_ECDSA,
     MBEDTLS_PK_RSA_ALT,
     MBEDTLS_PK_RSASSA_PSS,
+#if defined(MBEDTLS_ECKEY_IOT_ALT)
+    MBEDTLS_PK_ECKEY_ALT,
+#endif
 } mbedtls_pk_type_t;

 /**
diff --git a/include/mbedtls/pk_internal.h b/include/mbedtls/pk_internal.h
index 48b7a5f..d3bf2da 100644
--- a/include/mbedtls/pk_internal.h
+++ b/include/mbedtls/pk_internal.h
@@ -125,6 +125,9 @@ extern const mbedtls_pk_info_t mbedtls_rsa_info;
 #if defined(MBEDTLS_ECP_C)
 extern const mbedtls_pk_info_t mbedtls_eckey_info;
 extern const mbedtls_pk_info_t mbedtls_eckeydh_info;
+#if defined(MBEDTLS_ECKEY_IOT_ALT)
+extern const mbedtls_pk_info_t mbedtls_eckey_alt_info;
+#endif
 #endif

 #if defined(MBEDTLS_ECDSA_C)
diff --git a/library/pk.c b/library/pk.c
index 3e6cd38..4c13189 100644
--- a/library/pk.c
+++ b/library/pk.c
@@ -123,6 +123,10 @@ const mbedtls_pk_info_t * mbedtls_pk_info_from_type( mbedtls_pk_type_t pk_type )
             return( &mbedtls_eckey_info );
         case MBEDTLS_PK_ECKEY_DH:
             return( &mbedtls_eckeydh_info );
+#if defined(MBEDTLS_ECKEY_IOT_ALT)
+        case MBEDTLS_PK_ECKEY_ALT:
+            return( &mbedtls_eckey_alt_info );
+#endif
 #endif
 #if defined(MBEDTLS_ECDSA_C)
         case MBEDTLS_PK_ECDSA:
diff --git a/library/pk_wrap_alt.c b/library/pk_wrap_alt.c
new file mode 100644
index 0000000..9fc8a17
--- /dev/null
+++ b/library/pk_wrap_alt.c
@@ -0,0 +1,225 @@
+/* ***************************************************************************
+ *
+ * Copyright (c) 2020 Samsung Electronics All Rights Reserved.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing,
+ * software distributed under the License is distributed on an
+ * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
+ * either express or implied. See the License for the specific
+ * language governing permissions and limitations under the License.
+ *
+ ****************************************************************************/
+
+/*
+ *  Public Key abstraction layer: wrapper functions
+ *
+ *  Copyright (C) 2006-2015, ARM Limited, All Rights Reserved
+ *  SPDX-License-Identifier: Apache-2.0
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License"); you may
+ *  not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ *  This file is part of mbed TLS (https://tls.mbed.org)
+ */
+
+#if !defined(MBEDTLS_CONFIG_FILE)
+#include "mbedtls/config.h"
+#else
+#include MBEDTLS_CONFIG_FILE
+#endif
+
+#if defined(MBEDTLS_PK_C)
+#include "mbedtls/pk_internal.h"
+
+/* Even if RSA not activated, for the sake of RSA-alt */
+#include "mbedtls/rsa.h"
+
+#include <string.h>
+
+#if defined(MBEDTLS_ECP_C)
+#include "mbedtls/ecp.h"
+#endif
+
+#if defined(MBEDTLS_PLATFORM_C)
+#include "mbedtls/platform.h"
+#else
+#include <stdlib.h>
+#define mbedtls_calloc    calloc
+#define mbedtls_free       free
+#endif
+
+#include <limits.h>
+#include <stdint.h>
+
+#include <iot_error.h>
+#include <os/iot_os_util.h>
+#include <security/iot_security_crypto.h>
+#include <security/iot_security_common.h>
+
+#if defined(MBEDTLS_ECP_C)
+#if defined(MBEDTLS_ECKEY_IOT_ALT)
+
+/*
+ * Generic EC key
+ */
+static int eckey_can_do(mbedtls_pk_type_t type)
+{
+	return (type == MBEDTLS_PK_ECKEY ||
+		type == MBEDTLS_PK_ECKEY_ALT ||
+		type == MBEDTLS_PK_ECDSA);
+}
+
+static size_t eckey_get_bitlen(const void *ctx)
+{
+	return (((mbedtls_ecp_keypair *) ctx)->grp.pbits);
+}
+
+#if defined(MBEDTLS_ECDSA_C)
+static int eckey_verify_wrap(void *ctx, mbedtls_md_type_t md_alg,
+			     const unsigned char *hash, size_t hash_len,
+			     const unsigned char *sig, size_t sig_len)
+{
+	iot_error_t err;
+	iot_security_context_t *security_context;
+	iot_security_pk_params_t pk_params = { 0 };
+	iot_security_buffer_t msg_buf = { 0 };
+	iot_security_buffer_t sig_buf = { 0 };
+
+	(void)ctx;
+
+	security_context = iot_security_init();
+	if (!security_context) {
+		return IOT_ERROR_SECURITY_INIT;
+	}
+
+	err = iot_security_pk_init(security_context);
+	if (err) {
+		goto exit_deinit;
+	}
+
+	pk_params.md_type = (iot_security_md_type_t)md_alg;
+	err = iot_security_pk_set_params(security_context, &pk_params);
+	if (err) {
+		goto exit_pk_deinit;
+	}
+
+	msg_buf.p = (unsigned char *)hash;
+	msg_buf.len = hash_len;
+	sig_buf.p = (unsigned char *)sig;
+	sig_buf.len = sig_len;
+	err = iot_security_pk_verify(security_context, &msg_buf, &sig_buf);
+	if (err) {
+		return err;
+	}
+
+exit_pk_deinit:
+	(void)iot_security_pk_deinit(security_context);
+exit_deinit:
+	(void)iot_security_deinit(security_context);
+
+	return err;
+}
+
+static int eckey_sign_wrap(void *ctx, mbedtls_md_type_t md_alg,
+			   const unsigned char *hash, size_t hash_len,
+			   unsigned char *sig, size_t * sig_len,
+			   int (*f_rng) (void *, unsigned char *, size_t),
+			   void *p_rng)
+{
+	iot_error_t err;
+	iot_security_context_t *security_context;
+	iot_security_pk_params_t pk_params = { 0 };
+	iot_security_buffer_t msg_buf = { 0 };
+	iot_security_buffer_t sig_buf = { 0 };
+
+	(void)ctx;
+	(void)f_rng;
+	(void)p_rng;
+
+	security_context = iot_security_init();
+	if (!security_context) {
+		return IOT_ERROR_SECURITY_INIT;
+	}
+
+	err = iot_security_pk_init(security_context);
+	if (err) {
+		goto exit_deinit;
+	}
+
+	pk_params.md_type = (iot_security_md_type_t) md_alg;
+	err = iot_security_pk_set_params(security_context, &pk_params);
+	if (err) {
+		goto exit_pk_deinit;
+	}
+
+	msg_buf.p = (unsigned char *)hash;
+	msg_buf.len = hash_len;
+	err = iot_security_pk_sign(security_context, &msg_buf, &sig_buf);
+	if (err) {
+		goto exit_pk_deinit;
+	}
+
+	memcpy(sig, sig_buf.p, sig_buf.len);
+	*sig_len = sig_buf.len;
+
+	iot_os_free(sig_buf.p);
+
+ exit_pk_deinit:
+	(void)iot_security_pk_deinit(security_context);
+ exit_deinit:
+	(void)iot_security_deinit(security_context);
+
+	return err;
+}
+
+#endif /* MBEDTLS_ECDSA_C */
+
+static void *eckey_alloc_wrap(void)
+{
+	void *ctx = mbedtls_calloc(1, sizeof(mbedtls_ecp_keypair));
+
+	if (ctx != NULL)
+		mbedtls_ecp_keypair_init(ctx);
+
+	return (ctx);
+}
+
+static void eckey_free_wrap(void *ctx)
+{
+	mbedtls_ecp_keypair_free((mbedtls_ecp_keypair *) ctx);
+	mbedtls_free(ctx);
+}
+
+const mbedtls_pk_info_t mbedtls_eckey_alt_info = {
+	MBEDTLS_PK_ECKEY_ALT,
+	"EC",
+	eckey_get_bitlen,
+	eckey_can_do,
+	eckey_verify_wrap,
+	eckey_sign_wrap,
+	NULL,
+	NULL,
+	NULL,
+	eckey_alloc_wrap,
+	eckey_free_wrap,
+	NULL,
+};
+#endif /* MBEDTLS_ECKEY_IOT_ALT */
+#endif /* MBEDTLS_ECP_C */
+
+#endif /* MBEDTLS_PK_C */
-- 
2.7.4

